[
    {
	    "testName": "Single Match Extraction",
	    "input": "Hello <start> first message <end> Hi <start> second message <end> Bye",
	    "startHeader": "<start>",
	    "endHeader": "<end>",
	    "expectedOutput": ["<start> first message <end>"],
	    "expectedRemainingData": " Hi <start> second message <end> Bye"
	},
	{
        "testName": "Unpaired Start Header",
        "input": "Hello <start> first message Hi <start> second message <end> Bye",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start> second message <end>"],
        "expectedRemainingData": " Bye"
    },
    {
        "testName": "Unpaired End Header",
        "input": "Hello <start> first message <end> Hi <end> second message <end> Bye",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start> first message <end>"],
        "expectedRemainingData": " Hi <end> second message <end> Bye"
    },
    {
        "testName": "Consecutive Start Headers",
        "input": "Hello <start> <start> first message <end> Hi <start> second message <end> Bye",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start> first message <end>"],
        "expectedRemainingData": " Hi <start> second message <end> Bye"
    },
    {
        "testName": "Consecutive End Headers",
        "input": "Hello <start> first message <end> <end> Hi <start> second message <end> Bye",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start> first message <end>"],
        "expectedRemainingData": " <end> Hi <start> second message <end> Bye"
    },
    {
        "testName": "No Matches",
        "input": "Hello World",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": "Hello World"
    },
    {
        "testName": "Only Start Header",
        "input": "Hello <start> World",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": "<start> World"
    },
    {
        "testName": "Only End Header",
        "input": "Hello World <end>",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": ""
    },
    {
        "testName": "Extract from Empty Buffer",
        "input": "",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": ""
    },
    {
        "testName": "Start and End Header Overlapping",
        "input": "Hello <st<start>art> overlapping <end> example",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start>art> overlapping <end>"],
        "expectedRemainingData": " example"
    },
    {
        "testName": "Multiple Overlapping Headers",
        "input": "<st<start>ar<end>t<end> overlapping",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start>ar<end>"],
        "expectedRemainingData": "t<end> overlapping"
    },
    {
        "testName": "Very Long Input without Match",
        "input": "Lorem ipsum...[a very long string]...end",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": "Lorem ipsum...[a very long string]...end"
    },
    {
        "testName": "Headers at the Extremes",
        "input": "<start>Hello World<end>",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": ["<start>Hello World<end>"],
        "expectedRemainingData": ""
    },
    {
        "testName": "Buffer Full Situation",
        "input": "...[assuming it fills the buffer completely]...",
        "startHeader": "<start>",
        "endHeader": "<end>",
        "expectedOutput": [""],
        "expectedRemainingData": "...[assuming it fills the buffer completely]..."
    }
]